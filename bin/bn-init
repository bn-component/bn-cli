#!/usr/bin/env node

var download = require('../lib/download')
var program = require('commander')
var exists = require('fs').existsSync
var path = require('path')
var rm = require('rimraf').sync
var uid = require('uid')
var ora = require('ora')
var chalk = require('chalk')
var inquirer = require('inquirer')
var request = require('request')
var logger = require('../lib/logger')
var generate = require('../lib/generate')
var checkVersion = require('../lib/check-version')

/**
 * Usage.
 */

program
  .usage('<template-name> [project-name]')
  // .option('-c, --clone', 'use git clone')

/**
 * Help.
 */

program.on('--help', function () {
  console.log('  Examples:')
  console.log()
  console.log(chalk.gray('    # create a new project with git path'))
  console.log('    $ bn init xxx.git my-project')
  console.log()
})

/**
 * Help.
 */

function help () {
  program.parse(process.argv)
  if (program.args.length < 1) return program.help()
}
help()

/**
 * Padding.
 */

console.log()
process.on('exit', function () {
  console.log()
})

/**
 * Settings.
 */

var template = program.args[0]
var hasSlash = template.indexOf('/') > -1
var rawName = program.args[1]
var inPlace = !rawName || rawName === '.'
var name = inPlace ? path.relative('../', process.cwd()) : rawName
var to = path.resolve(rawName || '.')
// var clone = program.clone || false

if (exists(to)) {
  inquirer.prompt([{
    type: 'confirm',
    message: inPlace
      ? 'Generate project in current directory?'
      : 'Target directory exists. Continue?',
    name: 'ok'
  }], function (answers) {
    if (answers.ok) {
      downloadAndGenerate(template)
    }
  })
} else {
  downloadAndGenerate(template)
}

/**
 * Download a generate from a template repo.
 *
 * @param {String} template
 */

function downloadAndGenerate (template) {
  var tmp = '/tmp/bn-template-' + uid()
  var spinner = ora('downloading template')
  spinner.start()
  // download(template, tmp, { clone: clone }, function (err) {
  download(template, tmp, null, function (err) {
    spinner.stop()
    process.on('exit', function () {
      rm(tmp)
    })
    if (err) logger.fatal('Failed to download repo ' + template + ': ' + err.message.trim())
    generate(name, tmp, to, function (err) {
      if (err) logger.fatal(err)
      console.log()
      logger.success('Generated "%s".', name)
    })
  })
}
